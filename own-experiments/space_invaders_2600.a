    processor 6502
    include "vcs.h"
    include "macro.h"
    include "xmacro.h"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; This cartridge implements a simple Space Invaders clone in 4K.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

CannonSpriteHeight  equ 12
CannonColor     equ #$0E

WalkAlienSpriteHeight   equ 10
WalkAlienColor      equ #$12
WalkAlienYStartPos  equ 80
AlienStepsPerDirection  equ 10

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Variables segment

    seg.u Variables
    org $80

CannonXPos  .byte
WalkAlienYPos   .byte
WalkAlienXPos   .byte
AlienMovesleft  .byte

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Code segment

    seg Code
    org $f000

Start
    CLEAN_START
        
    lda #72 ; start centered
    sta CannonXPos
    sta WalkAlienXPos
    
    lda CannonColor
    sta COLUP0  ; store color
    lda #WalkAlienYStartPos
    sta WalkAlienYPos
    lda WalkAlienColor
    sta COLUP1
    lda $ff
    sta AlienMovesleft

NextFrame
    ; 262 scanlines in total. Use the xmcaros to simplify 
    ; the TIA line sync during VSYNC and overscan.
    VERTICAL_SYNC   ; 1 VBLANK + 3 VSYNC
    TIMER_SETUP 37  ; 37 VBLANK
    ; The idle period during VBLANK is a great place for our 
    ; sophisticated game logic. 
    lda CannonXPos
    ldx #0  ; player object 1
    jsr PositionHoriz
    sta WSYNC
    sta HMOVE   ; apply HMOVE to update the X position
    ; Move the aliens
    jsr MoveAliens
    lda WalkAlienXPos
    ldx #1  ; player object 2
    jsr PositionHoriz
    sta WSYNC
    sta HMOVE   ; apply HMOVE to update the X position
    
    TIMER_WAIT
    ; Turns off the Vertical Blank signal ( = image output on)
    lda #0
    sta VBLANK
    ; The 192 visible scanlines have to be iterated through; we 
    ; cannot use the PIA timer since we need to find the YPos of 
    ; our sprite and then start drawing it there.
    ldx #192    
LVScan
    jsr DrawWalkAlienSprite
    dex ; one scanline consumed when drawing the alien
    
    jsr DrawCannonSprite
    dex ; ...an another for the cannon
    
    bne LVScan  ; repeat until 192 lines

    ; Overscan
    TIMER_SETUP 29
    ; Turns on the Vertical Blank signal ( = image output off)
    lda #2
    sta VBLANK
    ; Now we have a few clock cycles during overscan where we 
    ; can process the joystick output:
    jsr MoveJoystick
    TIMER_WAIT  ; end overscan
    jmp NextFrame

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PositionHoriz subroutine
    sta WSYNC   ; wait for the next scanline
    ; To find the rough X-position, we divide by 15.
    ; We divide by 15 since that's the number of TIA 
    ; clock cycles consumed by our instructions in the 
    ; loop below (sbc and bcs).
    ;
    ; Of course, there's no division support on the 6502 so we 
    ; need to subtract instead until A becomes negative.
    sec         ; Always set carry when subtracting.
.RoughXPosition ; The . (dot) creates a local label.
    sbc #15
    bcs .RoughXPosition ; Until A is negative
    ; The fine position can be set within -7 <-> +8 pixels.
    ; To do this, we keep the reminder from our division 
    ; and shift those bits left into the higher nibble; the HMP0 
    ; registers wants it there.
    eor #7
    asl
    asl
    asl
    asl
    sta HMP0,x      ; the fine offset..
    sta RESP0,x     ; ..and its coarse position.
    rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Read joystick movement to control the cannon.
; Since it's Space Invaders, we only need to care 
; about horizontal movement:
MoveJoystick subroutine
        ldx CannonXPos
    lda #%01000000  ;Left?
    bit SWCHA
    bne .SkipMoveLeft
        cpx #1
        bcc .SkipMoveLeft
        dex
.SkipMoveLeft
    lda #%10000000  ;Right?
    bit SWCHA 
    bne .SkipMoveRight
        cpx #153
        bcs .SkipMoveRight
        inx
.SkipMoveRight
    stx CannonXPos
    rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Moves the alien for each frame: perform the classic Invaders 
; dance with alternating right <-> left moves.
MoveAliens subroutine
    lda AlienMovesleft
        sec
        cmp $ff
        beq .MoveLeft
        ; moving right
    inc WalkAlienXPos
        lda WalkAlienXPos
        sec
        cmp #110
        bne .EndIt
        lda $ff
        sta AlienMovesleft ; turn left
.MoveLeft
    dec WalkAlienXPos
        lda WalkAlienXPos
        sec
        cmp #50
        bne .EndIt
        lda #0
        sta AlienMovesleft ; turn right
.EndIt
    rts

DrawCannonSprite subroutine
    ; are we at the scanline where YPos for our sprite starts?
    txa         ; let A contain the current scanline 
    sec         ; cmp subtracts from A
    cmp #CannonSpriteHeight ; cannot move in Y direction, so just check height
    bcc .MaybeDrawSprite ; yes, skip over the next instruction
    lda #0          ; no, so disable all sprites
    ; note that we always execute the following segment
    ; its behaviour depends on what's stored in A:
    ;  - either the lookup index for the sprite byte, or
    ;  - zero to clear the sprite register when outside the relevant scanline
.MaybeDrawSprite
    tay     ; local coord -> Y
    lda SpaceShipBitmap,y  ; lookup bitmap for this scanline
    sta WSYNC   ; sync w/ scanline
    sta GRP0    ; store bitmap
    rts

DrawWalkAlienSprite subroutine
    ; are we at the scanline where YPos for our sprite starts?
    txa         ; let A contain the current scanline
    sec         ; ðŸ’¡ always set carry for subtract
    sbc WalkAlienYPos    
    cmp #WalkAlienSpriteHeight 
    bcc .MaybeDrawSprite ; yes, skip over the next instruction
    lda #0          ; no, so disable all sprites
    ; note that we always execute the following segment
    ; its behaviour depends on what's stored in A:
    ;  - either the lookup index for the sprite byte, or
    ;  - zero to clear the sprite register when outside the relevant scanline
.MaybeDrawSprite
    tay     ; local coord -> Y
    lda WalkAlienBitmap,y  ; lookup bitmap for this scanline
    sta WSYNC   ; sync w/ scanline
    sta GRP1    ; store bitmap
    rts


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; The sprite data 
;
;---Graphics Data generated with PlayerPal 2600---
SpaceShipBitmap
    .byte 0     ; zero padding to clear the sprite when outside its box
    .byte #%00000000;$0E
    .byte #%01000100;$0E
    .byte #%01000100;$0E
    .byte #%00111000;--
        .byte #%00101000;--
        .byte #%00111000;--
        .byte #%00111000;--
        .byte #%00010000;--
        .byte #%00010000;--
        .byte #%00000000;--
        .byte #%00000000;--
        .byte #%00000000;--

WalkAlienBitmap
    .byte 0     ; zero padding to clear the sprite when outside its box
        .byte #%11011000;
        .byte #%01001000;
        .byte #%01111000;
        .byte #%01111000;
        .byte #%01111000;--
        .byte #%10011100;--
        .byte #%01011000;--
        .byte #%00110000;--

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Pad the cartridge to 4K

    org $fffc
    .word Start ; reset vector
    .word Start ; BRK vector